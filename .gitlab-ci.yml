# 定义 stages（阶段）。任务将按此顺序执行。
stages:
  - build
  - clear
  - deploy

# 定义 job（任务）
job-building:
  variables:    #变量
    GIT_STRATEGY: "fetch"
  stage: build
  tags:
    - windows
  only:        
    - develop    #只有dev分支提交代码才会执行这个任务。也可以是分支名称或触发器名称
  script:
    - echo "start building"
    - yarn install
    - yarn run build:mp-weixin

job-clear:
  stage: clear
  only:        
    - develop    #只有dev分支提交代码才会执行这个任务。也可以是分支名称或触发器名称
  tags:
    - windows
  script:
    - echo "start clear"
  allow_failure: true #允许失败，即不影响下步构建

job-deploying:
  stage: deploy
  only:        
    - develop    #只有dev分支提交代码才会执行这个任务。也可以是分支名称或触发器名称
  tags:
    - windows
  script:
    - echo "start deploying"
    - pwsh ./preview.ps1
   
  
variables:    #变量
  GIT_STRATEGY: "none" #GIT策略，定义拉取代码的方式，有3种：clone/fetch/none，默认为clone，速度最慢，每步job都会重新clone一次代码。我们一般将它设置为none，在具体任务里设置为fetch就可以满足需求，毕竟不是每步都需要新代码，那也不符合我们测试的流程
      
cache:    #缓存
  #因为缓存为不同管道和任务间共享，可能会覆盖，所以有时需要设置key
  key: ${CI_COMMIT_REF_NAME}  # 启用每分支缓存。
  #key: "$CI_JOB_NAME/$CI_COMMIT_REF_NAME" # 启用每个任务和每个分支缓存。需要注意的是，如果是在windows中运行这个脚本，需要把$换成%
  untracked: true    #缓存所有Git未跟踪的文件
  paths:    #以下2个文件夹会被缓存起来，下次构建会解压出来
    - node_modules/